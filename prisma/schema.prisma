generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @unique @default(uuid())
  phoneNumber           String?      @unique @db.VarChar(15)
  email                 String       @unique @db.VarChar(320)
  password              String
  firstName             String
  lastName              String
  otpHash               String?
  otpExpiresAt          DateTime?
  isVerified            Boolean       @default(false)
  technicianVerified            Boolean       @default(false)
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  inCorrectAttempts     Int          @default(0)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @default(now())
  roleId                String?
  role                  Role?        @relation(fields: [roleId], references: [id])
  permissions           Permission[] @relation("UserPermissions")
  carts                 Cart[]
  wishlists             Wishlist[]
  orders                Order[]
}

model Role {
  id              String            @id @unique @default(uuid())
  name            String            @unique
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  users           User[]
  PricePercentage PricePercentage[]
}

model Permission {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  users       User[]   @relation("UserPermissions")
}

model Product {
  id              String            @id @default(uuid())
  name            String            @db.VarChar(255)
  subCategory     SubCategory       @relation(fields: [subCategoryId], references: [id])
  subCategoryId   String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  cartItems       Cart[]
  wishlists       Wishlist[]
  orderItems      OrderItem[]
  PricePercentage PricePercentage[]
  models          ProductModel[]
}

model ProductImage {
  id          String       @id @default(uuid())
  productModelId String
  productModel ProductModel @relation(fields: [productModelId], references: [id], onDelete: Cascade)
  uploadUrl   String       @db.VarChar(255)
  optimizeUrl String?      @db.VarChar(255)
  autoCropUrl String?      @db.VarChar(255)
  isPrimary   Boolean      @default(false)
}

model ProductModel {
  id          String           @id @default(uuid())
  productId   String
  product     Product          @relation(fields: [productId], references: [id])
  name        String           @db.VarChar(255)
  description String?          @db.Text
  price       Float
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  features    ProductFeature[]
  inventory   Inventory?
  OrderItem   OrderItem[]
  images      ProductImage[]
}


model Inventory {
  id        String       @id @default(uuid())
  modelId   String       @unique
  model     ProductModel @relation(fields: [modelId], references: [id])
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  status     String      @default("Pending")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model OrderItem {
  id             String       @id @default(uuid())
  orderId        String
  order          Order        @relation(fields: [orderId], references: [id])
  productModelId String
  productModel   ProductModel @relation(fields: [productModelId], references: [id])
  quantity       Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  Product        Product?     @relation(fields: [productId], references: [id])
  productId      String?
}

model ProductFeature {
  id          String       @id @default(uuid())
  description String       @db.Text
  modelId     String
  model       ProductModel @relation(fields: [modelId], references: [id])
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(255)
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
}

model Category {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(255)
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PricePercentage {
  id         String   @id @default(uuid())
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  percentage Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}
model TechnicianQuestionnaire {
  id                    Int      @id @default(autoincrement())
  businessName          String
  phoneNumber           String
  email                 String   @unique
  location              String
  businessType          String
  experienceYears       Int?
  experienceAreas       String[]
  brandsWorkedWith      String[]
  integrationExperience String
  purchaseSource        String
  purchaseHikvision     String
  requiresTraining      String
}


