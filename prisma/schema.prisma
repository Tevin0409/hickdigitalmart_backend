generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @unique @default(uuid())
  phoneNumber           String?            @unique @db.VarChar(15)
  email                 String             @unique @db.VarChar(320)
  password              String
  firstName             String
  lastName              String
  otpHash               String?
  otpExpiresAt          DateTime?
  isVerified            Boolean            @default(false)
  technicianVerified    Boolean            @default(false)
  shopOwnerVerified     Boolean            @default(false)
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  inCorrectAttempts     Int                @default(0)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @default(now())
  roleId                String?
  role                  Role?              @relation(fields: [roleId], references: [id])
  permissions           Permission[]       @relation("UserPermissions")
  carts                 Cart[]
  wishlists             Wishlist[]
  orders                Order[]
  Review                Review[]
  ReviewResponse        ReviewResponse[]
  UserNotification      UserNotification[]
  QuotationRequest      QuotationRequest[]
}

model Role {
  id              String            @id @unique @default(uuid())
  name            String            @unique
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  users           User[]
  PricePercentage PricePercentage[]
}

model Permission {
  id          String   @id @unique @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  users       User[]   @relation("UserPermissions")
}

model Product {
  id            String         @id @default(uuid())
  name          String         @db.VarChar(255)
  subCategory   SubCategory    @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  models        ProductModel[]
}

model ProductImage {
  id             String       @id @default(uuid())
  productModelId String
  productModel   ProductModel @relation(fields: [productModelId], references: [id], onDelete: Cascade)
  uploadUrl      String       @db.VarChar(255)
  optimizeUrl    String?      @db.VarChar(255)
  autoCropUrl    String?      @db.VarChar(255)
  isPrimary      Boolean      @default(false)
}

model ProductModel {
  id                   String                 @id @default(uuid())
  productId            String
  product              Product                @relation(fields: [productId], references: [id])
  name                 String                 @db.VarChar(255)
  description          String?                @db.Text
  price                Float
  status               String                 @default("draft") // status field (draft/visible)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  minimumStock         Int                    @default(10)
  isFeatured           Boolean                @default(false)
  features             ProductFeature[]
  inventory            Inventory?
  OrderItem            OrderItem[]
  images               ProductImage[]
  cartItems            Cart[]
  wishlists            Wishlist[]
  Review               Review[]
  PricePercentage      PricePercentage[]
  ScheduledPriceChange ScheduledPriceChange[]
  QuotationRequestItem QuotationRequestItem[]
}

model Inventory {
  id        String       @id @default(uuid())
  modelId   String       @unique
  model     ProductModel @relation(fields: [modelId], references: [id])
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model Order {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  orderPrice     Float
  vat            Float
  total          Float
  first_name     String
  last_name      String
  company_name   String?
  street_address String
  apartment      String?
  town           String
  phone_number   String
  email          String
  orderItems     OrderItem[]
  status         String        @default("Awaiting Payment")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  transactions   Transaction[]
}

model Transaction {
  id                  String   @id @default(uuid())
  merchantRequestID   String
  checkoutRequestID   String   @unique
  responseDescription String
  customerMessage     String
  resultCode          Int?
  resultDesc          String?
  mpesaReceiptNumber  String?
  amount              Int?
  phoneNumber         String?
  transactionDate     String?
  orderId             String
  order               Order    @relation(fields: [orderId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}

model OrderItem {
  id             String       @id @default(uuid())
  orderId        String
  order          Order        @relation(fields: [orderId], references: [id])
  productModelId String
  productModel   ProductModel @relation(fields: [productModelId], references: [id])
  quantity       Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model ProductFeature {
  id          String       @id @default(uuid())
  description String       @db.Text
  modelId     String
  model       ProductModel @relation(fields: [modelId], references: [id])
}

model SubCategory {
  id                   String                 @id @default(uuid())
  name                 String                 @db.VarChar(255)
  category             Category               @relation(fields: [categoryId], references: [id])
  categoryId           String
  products             Product[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  ScheduledPriceChange ScheduledPriceChange[]
}

model Category {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(255)
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

model Cart {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  productModelId String
  productModel   ProductModel @relation(fields: [productModelId], references: [id])
  quantity       Int          @default(1)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Wishlist {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  productModelId String
  productModel   ProductModel @relation(fields: [productModelId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model PricePercentage {
  id             String       @id @default(uuid())
  roleId         String
  role           Role         @relation(fields: [roleId], references: [id])
  productModelId String
  productModel   ProductModel @relation(fields: [productModelId], references: [id])
  percentage     Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model TechnicianQuestionnaire {
  id                    Int      @id @default(autoincrement())
  businessName          String
  phoneNumber           String
  email                 String   @unique
  location              String
  businessType          String
  experienceYears       Int?
  experienceAreas       String[]
  brandsWorkedWith      String[]
  integrationExperience String
  familiarWithStandard  String?
  purchaseSource        String[]
  purchaseHikvision     String
  requiresTraining      String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
}

model ShopOwnerQuestionnaire {
  id                     Int      @id @default(autoincrement())
  companyName            String
  firstName              String
  lastName               String
  phoneNumber            String
  phoneNumber2           String?
  email                  String   @unique
  email2                 String?
  address                String
  selectedBusinessType   String
  selectedBrands         String[]
  selectedSecurityBrands String[]
  otherBrand             String?
  selectedCategories     String[]
  hikvisionChallenges    String?
  adviceToSecureDigital  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now())
}

model Review {
  id             String          @id @default(uuid())
  productModelId String
  productModel   ProductModel    @relation(fields: [productModelId], references: [id])
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  rating         Int             @default(0) // e.g., 1â€“5 stars
  comment        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  images         ReviewImage[]
  ReviewResponse ReviewResponse?
}

model ReviewResponse {
  id       String @id @default(uuid())
  reviewId String @unique
  review   Review @relation(fields: [reviewId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ReviewImage {
  id          String  @id @default(uuid())
  reviewId    String
  review      Review  @relation(fields: [reviewId], references: [id])
  uploadUrl   String  @db.VarChar(255)
  optimizeUrl String? @db.VarChar(255)
  isPrimary   Boolean @default(false)
}

model ScheduledPriceChange {
  id             String        @id @default(uuid())
  productModelId String? // optional if targeting subcategory
  productModel   ProductModel? @relation(fields: [productModelId], references: [id])

  subCategoryId String? // optional if targeting productModel
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])

  percentage Float // positive for increase, negative for discount
  reason     String? @db.VarChar(255)

  startsAt DateTime
  endsAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserNotification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Banner {
  id              String    @id @default(uuid())
  title           String    @db.VarChar(255)
  description     String?   @db.Text
  imageUrl        String    @db.VarChar(255)
  mobileImageUrl  String?   @db.VarChar(255)
  linkUrl         String?   @db.VarChar(255)
  isVisibleWeb    Boolean   @default(true)
  isVisibleMobile Boolean   @default(true)
  priority        Int       @default(0)
  status          String    @default("draft")
  startsAt        DateTime?
  endsAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
}

model QuotationRequest {
  id             String                 @id @default(uuid())
  userId         String
  user           User                   @relation(fields: [userId], references: [id])
  status         String                 @default("pending") // e.g., pending, reviewed, quoted, rejected
  message        String?                @db.Text // optional note from the user
  response       String?                @db.Text // optional reply/quote from admin
  quotationItems QuotationRequestItem[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now()) @updatedAt
}

model QuotationRequestItem {
  id               String           @id @default(uuid())
  quotationId      String
  quotationRequest QuotationRequest @relation(fields: [quotationId], references: [id])
  productModelId   String
  productModel     ProductModel     @relation(fields: [productModelId], references: [id])
  quantity         Int              @default(1)
  notes            String?          @db.Text // optional: specific requirements for this item
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
}
